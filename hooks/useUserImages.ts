import { firestore } from "@/firebase.config";
import { useAuth } from "@/hooks/useAuth";
import { useEffect, useState } from "react";

export interface UserImage {
  id: string;
  url: string;
  timestamp: number;
  filterName: string;
  isFavorite: boolean;
  downloads: number;
  fileName?: string;
  contentType?: string;
  fileSize?: number;
}

export function useUserImages() {
  const { user } = useAuth();
  const [images, setImages] = useState<UserImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log("=== useUserImages useEffect √ßalƒ±≈ütƒ± ===");
    console.log("User objesi:", user);
    console.log("User UID:", user?.uid);
    console.log("User email:", user?.email);


    // Koleksiyonlarƒ± listele
    const listCollections = async () => {
      try {
        console.log("üìÅ Koleksiyonlar listeleniyor...");
        // Not: React Native Firebase'de koleksiyon listesi farklƒ± ≈üekilde yapƒ±lƒ±r
        // Basit bir test sorgusu yapalƒ±m
        const testQuery = await firestore()
          .collection("aiToolRequests")
          .limit(1)
          .get();
        console.log("üìä aiToolRequests koleksiyonu test sonucu:");
        console.log("- Dok√ºman sayƒ±sƒ±:", testQuery.docs.length);
        console.log("- Empty mi:", testQuery.empty);

        if (testQuery.docs.length > 0) {
          console.log("üìÑ ƒ∞lk dok√ºman ID:", testQuery.docs[0].id);
          console.log("üìÑ ƒ∞lk dok√ºman verisi:", testQuery.docs[0].data());
        }
      } catch (error) {
        console.error("‚ùå Koleksiyon listesi hatasƒ±:", error);
      }
    };

    listCollections();

    if (!user?.uid) {
      console.log("‚ùå User UID yok, bo≈ü array d√∂nd√ºr√ºl√ºyor");
      setImages([]);
      setLoading(false);
      return;
    }

    console.log("‚úÖ User UID var:", user.uid, "G√∂rseller √ßekiliyor...");

    const fetchUserImages = async () => {
      try {
        console.log("üöÄ fetchUserImages fonksiyonu ba≈üladƒ±");
        setLoading(true);
        setError(null);

        // aiToolRequests koleksiyonundan kullanƒ±cƒ±nƒ±n ID'sine g√∂re dok√ºmanƒ± √ßek
        console.log("üîç Firestore sorgusu ba≈ülƒ±yor...");
        console.log("Koleksiyon: aiToolRequests");
        console.log("Aranan userId:", user.uid);

        // √ñnce userId alanƒ± ile sorgula
        let querySnapshot = await firestore()
          .collection("aiToolRequests")
          .where("userId", "==", user.uid)
          .get();

        console.log("üìä userId sorgusu sonucu:");
        console.log("- Dok√ºman sayƒ±sƒ±:", querySnapshot.docs.length);
        console.log("- Empty mi:", querySnapshot.empty);

        let doc = querySnapshot.docs[0];

        // Eƒüer userId ile bulunamazsa, document ID ile dene
        if (!doc) {
          console.log("‚ö†Ô∏è userId ile bulunamadƒ±, document ID ile deneniyor...");
          const docRef = firestore().collection("aiToolRequests").doc(user.uid);
          const docSnapshot = await docRef.get();
          console.log("üìÑ Document ID sorgusu sonucu:");
          console.log("- Exists:", docSnapshot.exists());
          console.log("- ID:", docSnapshot.id);

          if (docSnapshot.exists()) {
            doc = docSnapshot as any; // Type assertion for compatibility
            console.log("‚úÖ Document ID ile bulundu!");
          } else {
            console.log("‚ùå Document ID ile de bulunamadƒ±");
          }
        } else {
          console.log("‚úÖ userId ile bulundu!");
        }

        if (!doc || !doc.exists) {
          console.log("‚ùå Hi√ßbir dok√ºman bulunamadƒ±");

          // Debug i√ßin: T√ºm koleksiyonu listele
          console.log("üîç Debug: T√ºm koleksiyonu listeleniyor...");
          try {
            const allDocsSnapshot = await firestore()
              .collection("aiToolRequests")
              .limit(5)
              .get();

            console.log("üìã Koleksiyondaki ilk 5 dok√ºman:");
            allDocsSnapshot.docs.forEach((doc, index) => {
              console.log(`${index + 1}. ID: ${doc.id}`);
              const data = doc.data();
              console.log(`   - userId alanƒ± var mƒ±:`, "userId" in data);
              console.log(`   - userId deƒüeri:`, data.userId);
              console.log(`   - result alanƒ± var mƒ±:`, "result" in data);
            });
          } catch (debugError) {
            console.error("Debug sorgusu hatasƒ±:", debugError);
          }

          setImages([]);
          return;
        }

        const data = doc.data();
        console.log("Firestore'dan gelen veri:", data);

        const resultData = data?.result?.data;
        console.log("Result data:", resultData);

        if (!resultData?.images) {
          console.log("Images bulunamadƒ±, resultData:", resultData);
          setImages([]);
          return;
        }

        // G√∂rselleri UserImage formatƒ±na d√∂n√º≈üt√ºr
        const userImages: UserImage[] = Object.entries(resultData.images).map(
          ([index, imageData]: [string, any]) => ({
            id: `${user.uid}_${index}`,
            url: imageData.url || "",
            timestamp: imageData.updatedAt
              ? new Date(imageData.updatedAt).getTime()
              : Date.now(),
            filterName: imageData.filterName || "√ñzel Filtre",
            isFavorite: false, // Varsayƒ±lan olarak false, daha sonra ayrƒ± bir koleksiyonda tutulabilir
            downloads: 0, // Varsayƒ±lan olarak 0, daha sonra ayrƒ± bir koleksiyonda tutulabilir
            fileName: imageData.file_name,
            contentType: imageData.content_type,
            fileSize: imageData.file_size,
          }),
        );

        // Tarihe g√∂re sƒ±rala (en yeni √∂nce)
        userImages.sort((a, b) => b.timestamp - a.timestamp);

        setImages(userImages);
      } catch (err) {
        console.error("Kullanƒ±cƒ± g√∂rselleri y√ºklenirken hata:", err);
        setError("G√∂rseller y√ºklenirken bir hata olu≈ütu");
        setImages([]);
      } finally {
        setLoading(false);
      }
    };

    fetchUserImages();
  }, [user?.uid, user]);

  const toggleFavorite = async (imageId: string) => {
    setImages((prev) =>
      prev.map((img) =>
        img.id === imageId ? { ...img, isFavorite: !img.isFavorite } : img,
      ),
    );
    // TODO: Firestore'da favori durumunu g√ºncelle
  };

  const deleteImage = async (imageId: string) => {
    setImages((prev) => prev.filter((img) => img.id !== imageId));
    // TODO: Firestore'dan g√∂rseli sil
  };

  return {
    images,
    loading,
    error,
    toggleFavorite,
    deleteImage,
    refetch: () => {
      if (user?.uid) {
        // useEffect'i tetiklemek i√ßin user.uid'yi deƒüi≈ütir
        setImages([]);
        setLoading(true);
      }
    },
  };
}

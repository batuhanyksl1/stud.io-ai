import { firestore } from "@/firebase.config";
import { useAuth } from "@/hooks/useAuth";
import { useEffect, useState } from "react";

export interface UserImage {
  id: string;
  url: string;
  timestamp: number;
  filterName: string;
  isFavorite: boolean;
  downloads: number;
  fileName?: string;
  contentType?: string;
  fileSize?: number;
}

export function useUserImages() {
  const { user } = useAuth();
  const [images, setImages] = useState<UserImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log("=== useUserImages useEffect √ßalƒ±≈ütƒ± ===");
    console.log("User objesi:", user);
    console.log("User UID:", user?.uid);
    console.log("User email:", user?.email);

    if (!user?.uid) {
      console.log("‚ùå User UID yok, bo≈ü array d√∂nd√ºr√ºl√ºyor");
      setImages([]);
      setLoading(false);
      return;
    }

    console.log("‚úÖ User UID var:", user.uid, "G√∂rseller √ßekiliyor...");

    const fetchUserImages = async () => {
      try {
        console.log("üîÑ Kullanƒ±cƒ± dok√ºmanlarƒ± √ßekiliyor...");
        setLoading(true);
        setError(null);

        // Kullanƒ±cƒ± giri≈ü yapmƒ±≈ü mƒ± kontrol et
        if (!user?.uid) {
          setError("Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü!");
          setImages([]);
          return;
        }

        console.log("üë§ Kullanƒ±cƒ± UID:", user.uid);

        // aiToolRequests koleksiyonundan kullanƒ±cƒ±nƒ±n dok√ºmanlarƒ±nƒ± √ßek
        const querySnapshot = await firestore()
          .collection("aiToolRequests")
          .where("userId", "==", user.uid)
          .get();

        console.log("üìä Sorgu sonucu:", querySnapshot.docs.length, "dok√ºman");

        if (querySnapshot.docs.length === 0) {
          setError("Bu kullanƒ±cƒ± i√ßin dok√ºman bulunamadƒ±!");
          setImages([]);
        } else {
          const docs = querySnapshot.docs.map((doc) => ({
            id: doc.id,
            ...doc.data(),
          }));

          setImages([]); // ≈ûimdilik bo≈ü array, veri yapƒ±sƒ±nƒ± g√∂rmek i√ßin
          console.log("‚úÖ Kullanƒ±cƒ± dok√ºmanlarƒ± y√ºklendi:", docs.length);
          console.log("üìã T√úM DOK√úMANLAR:");
          docs.forEach((doc, index) => {
            console.log(`üìÑ Dok√ºman #${index + 1}:`, doc);
          });
        }
      } catch (err: any) {
        console.error("‚ùå Veri √ßekme hatasƒ±:", err);
        setError(`Hata: ${err.message}`);
        setImages([]);
      } finally {
        setLoading(false);
      }
    };

    fetchUserImages();
  }, [user?.uid, user]);

  const toggleFavorite = async (imageId: string) => {
    setImages((prev) =>
      prev.map((img) =>
        img.id === imageId ? { ...img, isFavorite: !img.isFavorite } : img,
      ),
    );
    // TODO: Firestore'da favori durumunu g√ºncelle
  };

  const deleteImage = async (imageId: string) => {
    setImages((prev) => prev.filter((img) => img.id !== imageId));
    // TODO: Firestore'dan g√∂rseli sil
  };

  return {
    images,
    loading,
    error,
    toggleFavorite,
    deleteImage,
    refetch: () => {
      if (user?.uid) {
        // useEffect'i tetiklemek i√ßin user.uid'yi deƒüi≈ütir
        setImages([]);
        setLoading(true);
      }
    },
  };
}
